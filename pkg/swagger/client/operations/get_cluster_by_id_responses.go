package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/drycc/workflow-manager/pkg/swagger/models"
)

// GetClusterByIDReader is a Reader for the GetClusterByID structure.
type GetClusterByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetClusterByIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetClusterByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetClusterByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetClusterByIDOK creates a GetClusterByIDOK with default headers values
func NewGetClusterByIDOK() *GetClusterByIDOK {
	return &GetClusterByIDOK{}
}

/*GetClusterByIDOK handles this case with default header values.

clusters details response
*/
type GetClusterByIDOK struct {
	Payload *models.Cluster
}

func (o *GetClusterByIDOK) Error() string {
	return fmt.Sprintf("[GET /v3/clusters/{id}][%d] getClusterByIdOK  %+v", 200, o.Payload)
}

func (o *GetClusterByIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Cluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClusterByIDDefault creates a GetClusterByIDDefault with default headers values
func NewGetClusterByIDDefault(code int) *GetClusterByIDDefault {
	return &GetClusterByIDDefault{
		_statusCode: code,
	}
}

/*GetClusterByIDDefault handles this case with default header values.

unexpected error
*/
type GetClusterByIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get cluster by id default response
func (o *GetClusterByIDDefault) Code() int {
	return o._statusCode
}

func (o *GetClusterByIDDefault) Error() string {
	return fmt.Sprintf("[GET /v3/clusters/{id}][%d] getClusterById default  %+v", o._statusCode, o.Payload)
}

func (o *GetClusterByIDDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
